tony@wam-nuc:~/projects/tinymembench$ sudo ./tinymembench
Using FIFO scheduler
tinymembench-pthread v0.7.0 (simple benchmark for memory throughput and latency)
Single thread test
1 thread(s) on 12 CPU

==========================================================================
==                     Test: DRAM                                               ==
== Memory bandwidth tests                                               ==
== size Bytes: 1073741824                                                ==
== blocksize Bytes: 2048                                                ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and written          ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   5840.5 MB/s (0.4%)
 C copy backwards (32 byte blocks)                    :   5848.2 MB/s (0.4%)
 C copy backwards (64 byte blocks)                    :   5846.2 MB/s (1.0%)
 C copy                                               :   6060.7 MB/s (1.1%)
 C copy prefetched (32 bytes step)                    :   6092.1 MB/s (1.0%)
 C copy prefetched (64 bytes step)                    :   6092.7 MB/s
 C 2-pass copy                                        :   5811.0 MB/s (1.1%)
 C 2-pass copy prefetched (32 bytes step)             :   5706.7 MB/s (0.9%)
 C 2-pass copy prefetched (64 bytes step)             :   5722.2 MB/s (0.8%)
 C fetch                                              :  13819.0 MB/s (1.2%)
 C fill                                               :   9329.9 MB/s (0.8%)
 C fill (shuffle within 16 byte blocks)               :   9336.0 MB/s (0.8%)
 C fill (shuffle within 32 byte blocks)               :   9315.7 MB/s (0.8%)
 C fill (shuffle within 64 byte blocks)               :   9333.1 MB/s (0.3%)
 ---
 standard memcpy                                      :   8446.3 MB/s (0.5%)
 standard memset                                      :  18307.0 MB/s (1.2%)
 ---
 MOVSB copy                                           :   6744.9 MB/s (1.4%)
 MOVSD copy                                           :   6766.5 MB/s (0.8%)
 STOSB fill                                           :  18306.8 MB/s (0.9%)
 SSE2 copy                                            :   6061.3 MB/s
 SSE2 nontemporal copy                                :   8615.8 MB/s (0.2%)
 SSE2 copy prefetched (32 bytes step)                 :   6122.9 MB/s (1.1%)
 SSE2 copy prefetched (64 bytes step)                 :   6117.6 MB/s
 SSE2 nontemporal copy prefetched (32 bytes step)     :   8660.1 MB/s (0.6%)
 SSE2 nontemporal copy prefetched (64 bytes step)     :   8671.4 MB/s (0.5%)
 SSE2 2-pass copy                                     :   5943.8 MB/s (1.1%)
 SSE2 2-pass copy prefetched (32 bytes step)          :   5945.4 MB/s (1.0%)
 SSE2 2-pass copy prefetched (64 bytes step)          :   5976.2 MB/s (1.0%)
 SSE2 2-pass nontemporal copy                         :   3853.4 MB/s (0.8%)
 SSE2 fill                                            :   9319.6 MB/s (0.3%)
 SSE2 nontemporal fill                                :  18539.6 MB/s (0.4%)
 ---
 AVX2 copy                                            :   5618.0 MB/s
 AVX2 nontemporal copy                                :   7680.7 MB/s (1.4%)
 AVX2 copy prefetched (32 bytes step)                 :   5852.0 MB/s (1.3%)
 AVX2 copy prefetched (64 bytes step)                 :   5811.7 MB/s (1.0%)
 AVX2 nontemporal copy prefetched (32 bytes step)     :   8299.0 MB/s (0.6%)
 AVX2 nontemporal copy prefetched (64 bytes step)     :   8146.7 MB/s
 AVX2 2-pass copy                                     :   5916.6 MB/s (1.4%)
 AVX2 2-pass copy prefetched (32 bytes step)          :   5938.7 MB/s (1.0%)
 AVX2 2-pass copy prefetched (64 bytes step)          :   5938.8 MB/s
 AVX2 2-pass nontemporal copy                         :   3113.9 MB/s (0.4%)
 AVX2 fill                                            :   9299.8 MB/s (0.8%)
 AVX2 nontemporal fill                                :  18533.3 MB/s (0.4%)

==========================================================================
== Memory latency test                                                  ==
== latbench_size Bytes: 2147483648                                       ==
== latbench_count: 10000000                                             ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.0 ns          /     7.9 ns
      2048 :    0.0 ns          /     7.9 ns
      4096 :    0.0 ns          /     7.9 ns
      8192 :    0.0 ns          /     7.9 ns
     16384 :    0.0 ns          /     7.9 ns
     32768 :    0.0 ns          /     7.9 ns
     65536 :    0.9 ns          /     9.2 ns
    131072 :    1.3 ns          /     9.5 ns
    262144 :    1.6 ns          /     9.6 ns
    524288 :    6.2 ns          /    16.1 ns
   1048576 :    8.5 ns          /    18.1 ns
   2097152 :    9.8 ns          /    18.8 ns
   4194304 :   10.7 ns          /    19.0 ns
   8388608 :   13.3 ns          /    21.1 ns
  16777216 :   52.5 ns          /    86.4 ns
  33554432 :   94.7 ns          /   133.8 ns
  67108864 :  115.7 ns          /   161.1 ns
 134217728 :  129.7 ns          /   172.8 ns
 268435456 :  138.3 ns          /   175.4 ns
 536870912 :  144.5 ns          /   175.6 ns
1073741824 :  147.3 ns          /   176.5 ns

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /     7.9 ns
      2048 :    0.0 ns          /     7.9 ns
      4096 :    0.0 ns          /     7.9 ns
      8192 :    0.0 ns          /     7.9 ns
     16384 :    0.0 ns          /     7.9 ns
     32768 :    0.0 ns          /     7.9 ns
     65536 :    0.9 ns          /     9.2 ns
    131072 :    1.3 ns          /     9.5 ns
    262144 :    1.6 ns          /     9.6 ns
    524288 :    5.1 ns          /    14.8 ns
   1048576 :    6.9 ns          /    16.2 ns
   2097152 :    7.9 ns          /    16.6 ns
   4194304 :    8.5 ns          /    16.8 ns
   8388608 :   10.6 ns          /    18.8 ns
  16777216 :   45.6 ns          /    76.5 ns
  33554432 :   84.8 ns          /   128.6 ns
  67108864 :  108.3 ns          /   148.7 ns
 134217728 :  120.8 ns          /   159.7 ns
 268435456 :  125.9 ns          /   163.3 ns
 536870912 :  127.5 ns          /   161.2 ns
1073741824 :  131.3 ns          /   161.8 ns
