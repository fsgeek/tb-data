tony@localhost:~/projects/tinymembench$ sudo ./tinymembench
Using FIFO scheduler
tinymembench-pthread v0.7.0 (simple benchmark for memory throughput and latency)
Single thread test
1 thread(s) on 2 CPU

==========================================================================
==                     Test: DRAM                                               ==
== Memory bandwidth tests                                               ==
== size Bytes: 1073741824                                                ==
== blocksize Bytes: 2048                                                ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and written          ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   5476.0 MB/s (0.7%)
 C copy backwards (32 byte blocks)                    :   5470.4 MB/s (0.4%)
 C copy backwards (64 byte blocks)                    :   5480.6 MB/s (0.6%)
 C copy                                               :   5482.5 MB/s (0.3%)
 C copy prefetched (32 bytes step)                    :   5705.9 MB/s (0.8%)
 C copy prefetched (64 bytes step)                    :   5685.8 MB/s (0.4%)
 C 2-pass copy                                        :   4679.8 MB/s (0.3%)
 C 2-pass copy prefetched (32 bytes step)             :   5127.0 MB/s (0.4%)
 C 2-pass copy prefetched (64 bytes step)             :   5161.6 MB/s (0.8%)
 C fetch                                              :  15192.2 MB/s (0.7%)
 C fill                                               :   8431.7 MB/s (0.8%)
 C fill (shuffle within 16 byte blocks)               :   8506.3 MB/s (0.8%)
 C fill (shuffle within 32 byte blocks)               :   8502.5 MB/s (0.9%)
 C fill (shuffle within 64 byte blocks)               :   8479.3 MB/s (1.2%)
 ---
 standard memcpy                                      :   9443.9 MB/s (1.5%)
 standard memset                                      :   8858.0 MB/s (0.8%)
 ---
 MOVSB copy                                           :   5820.7 MB/s (0.5%)
 MOVSD copy                                           :   5825.6 MB/s (1.0%)
 STOSB fill                                           :   9128.7 MB/s (0.4%)
 SSE2 copy                                            :   5868.5 MB/s (0.7%)
 SSE2 nontemporal copy                                :   9169.6 MB/s (9.9%)
 SSE2 copy prefetched (32 bytes step)                 :   5922.3 MB/s (0.6%)
 SSE2 copy prefetched (64 bytes step)                 :   5911.9 MB/s (1.7%)
 SSE2 nontemporal copy prefetched (32 bytes step)     :   9585.3 MB/s (1.2%)
 SSE2 nontemporal copy prefetched (64 bytes step)     :   9586.7 MB/s (1.8%)
 SSE2 2-pass copy                                     :   5219.7 MB/s (0.5%)
 SSE2 2-pass copy prefetched (32 bytes step)          :   5703.8 MB/s (0.8%)
 SSE2 2-pass copy prefetched (64 bytes step)          :   5626.9 MB/s (0.8%)
 SSE2 2-pass nontemporal copy                         :   3104.0 MB/s (2.4%)
 SSE2 fill                                            :   8833.7 MB/s (0.7%)
 SSE2 nontemporal fill                                :  20810.2 MB/s (1.0%)
 ---
 AVX2 copy                                            :   5861.2 MB/s (1.1%)
 AVX2 nontemporal copy                                :   9143.6 MB/s (0.4%)
 AVX2 copy prefetched (32 bytes step)                 :   5772.8 MB/s (1.2%)
 AVX2 copy prefetched (64 bytes step)                 :   5742.5 MB/s
 AVX2 nontemporal copy prefetched (32 bytes step)     :   9196.3 MB/s (0.4%)
 AVX2 nontemporal copy prefetched (64 bytes step)     :   9047.6 MB/s (0.3%)
 AVX2 2-pass copy                                     :   5132.0 MB/s (0.3%)
 AVX2 2-pass copy prefetched (32 bytes step)          :   5493.2 MB/s (0.4%)
 AVX2 2-pass copy prefetched (64 bytes step)          :   5363.1 MB/s (0.3%)
 AVX2 2-pass nontemporal copy                         :   3080.6 MB/s (0.2%)
 AVX2 fill                                            :   8822.2 MB/s (1.1%)
 AVX2 nontemporal fill                                :  20816.4 MB/s (2.9%)

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 MOVSD copy (from framebuffer)                        :  11821.3 MB/s (0.6%)
 MOVSD 2-pass copy (from framebuffer)                 :   7643.6 MB/s (0.3%)
 SSE2 copy (from framebuffer)                         :  14207.5 MB/s (0.4%)
 SSE2 2-pass copy (from framebuffer)                  :  12614.4 MB/s (0.3%)

==========================================================================
== Memory latency test                                                  ==
== latbench_size Bytes: 2147483648                                       ==
== latbench_count: 10000000                                             ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read, [MADV_NOHUGEPAGE]
      1024 :    0.0 ns          /    12.2 ns
      2048 :    0.0 ns          /    12.2 ns
      4096 :    0.0 ns          /    12.2 ns
      8192 :    0.0 ns          /    12.2 ns
     16384 :    0.0 ns          /    12.2 ns
     32768 :    1.8 ns          /    14.2 ns
     65536 :    2.9 ns          /    15.5 ns
    131072 :    3.4 ns          /    16.0 ns
    262144 :    3.7 ns          /    16.1 ns
    524288 :    5.7 ns          /    18.9 ns
   1048576 :   10.8 ns          /    25.6 ns
   2097152 :   13.6 ns          /    27.8 ns
   4194304 :   15.1 ns          /    28.5 ns
   8388608 :   28.6 ns          /    50.3 ns
  16777216 :   69.9 ns          /   104.7 ns
  33554432 :   92.6 ns          /   122.9 ns
  67108864 :  105.5 ns          /   131.2 ns
 134217728 :  114.1 ns          /   136.9 ns
 268435456 :  120.1 ns          /   141.4 ns
 536870912 :  125.3 ns          /   146.2 ns
1073741824 :  133.0 ns          /   154.6 ns

block size : single random read / dual random read, [MADV_HUGEPAGE]
      1024 :    0.0 ns          /    12.2 ns
      2048 :    0.0 ns          /    12.2 ns
      4096 :    0.0 ns          /    12.2 ns
      8192 :    0.0 ns          /    12.2 ns
     16384 :    0.0 ns          /    12.2 ns
     32768 :    1.9 ns          /    14.1 ns
     65536 :    2.9 ns          /    15.5 ns
    131072 :    3.4 ns          /    16.0 ns
    262144 :    3.6 ns          /    16.1 ns
    524288 :    4.1 ns          /    16.8 ns
   1048576 :    8.5 ns          /    23.1 ns
   2097152 :   10.8 ns          /    24.9 ns
   4194304 :   12.1 ns          /    25.5 ns
   8388608 :   19.5 ns          /    37.5 ns
  16777216 :   54.9 ns          /    87.8 ns
  33554432 :   74.0 ns          /   103.0 ns
  67108864 :   83.5 ns          /   107.6 ns
 134217728 :   85.1 ns          /   109.1 ns
 268435456 :   89.2 ns          /   111.1 ns
 536870912 :   91.1 ns          /   112.1 ns
1073741824 :   92.4 ns          /   112.6 ns
